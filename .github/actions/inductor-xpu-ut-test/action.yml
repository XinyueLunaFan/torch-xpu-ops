name: inductor-xpu-ut-test

inputs:
  ut_suite:
    required: true
    type: string
    default: 'op_example'
    description: op_example,op_finegrain,op_ut,torch_xpu. Delimiter is comma
    

runs:
  using: composite
  steps:
    - name: UT Test (${{ inputs.ut_suite }})
      shell: bash
      run: |
        source activate xpu_op_${ZE_AFFINITY_MASK}
        source /opt/intel/oneapi/compiler/latest/env/vars.sh
        cd ${{ github.workspace }}
        mkdir -p ut_log
        # check param
        function contains() {
            contains_status="echo 'Start $2 ...'"
            {
              [[ $1 =~ (^|,)$2($|,) ]]
            } || {
              echo "[Warning] $2 is not suppotted type! Skipped!"
              contains_status="continue"
            }
        }
        set -xe
        for ut_suite in $(echo ${{ inputs.ut_suite }} |sed 's/,/ /g')
        do
          contains "op_example,op_finegrain,op_ut,torch_xpu" $ut_suite
          $contains_status
          if [[ ${ut_suite} == 'op_example' ]]; then
            unset PYTORCH_TEST_WITH_SLOW
            unset PYTORCH_ENABLE_XPU_FALLBACK
            cd ${{ github.workspace }}
            cd examples
            timeout 8000 pytest -v 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_Examples_UT_Test.log
          fi
          if [[ ${ut_suite} == 'op_finegrain' ]]; then
            export PYTORCH_TEST_WITH_SLOW=1
            unset PYTORCH_ENABLE_XPU_FALLBACK
            cd ${{ github.workspace }}
            cd ../pytorch/third_party/torch-xpu-ops/test/xpu/fin_grain
            timeout 10000 python run_fine_grain.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_Finegrain_UT_Test.log
          fi
          if [[ ${ut_suite} == 'op_ut' ]]; then
            export PYTORCH_TEST_WITH_SLOW=1
            cd ${{ github.workspace }}
            export PYTORCH_ENABLE_XPU_FALLBACK=1
            export PYTORCH_TEST_WITH_SLOW=1
            cd ../pytorch/third_party/torch-xpu-ops/test/xpu
            timeout 10000 python run_test_with_skip.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_with_skip_UT_Test.log
            # Cases run with a on-demand white list, since some suites are too
            # slow to go through all operators on CPU. So add cases on-demand
            # when XPU implementatoin is done.
            # test_foreach, test_decomp
            timeout 10000 python run_test_with_only.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_with_only_UT_Test.log
          fi
          if [[ ${ut_suite} == 'torch_xpu' ]]; then
            unset PYTORCH_TEST_WITH_SLOW
            export PYTORCH_ENABLE_XPU_FALLBACK=1
            cd ${{ github.workspace }}
            cd ../pytorch
            TEST_REPORTS_DIR=$(pwd)/test/test-reports
            rm -rf "$TEST_REPORTS_DIR" && mkdir -p "$TEST_REPORTS_DIR"
            # Run Pytorch XPU binary UT
            for xpu_case in build/bin/*{xpu,sycl}*; do
              if [[ "$xpu_case" != *"*"* && "$xpu_case" != *.so && "$xpu_case" != *.a ]]; then
                case_name=$(basename "$xpu_case")
                echo "Testing ${case_name} ..."
                "$xpu_case" --gtest_output=xml:"$TEST_REPORTS_DIR"/"$case_name".xml
              fi
            done
            # Run Pytorch XPU python UT
            export PYTORCH_ENABLE_XPU_FALLBACK=1
            sed -i 's/selected_tests = exclude_tests(XPU_BLOCKLIST.*/selected_tests = XPU_TEST/g' ./test/run_test.py
            python test/run_test.py --xpu 2>&1 | tee ${{ github.workspace }}/ut_log/Torch_XPU_python_UT_Test.log
          fi
        done

    - name: Upload Inductor XPU UT Data
      uses: actions/upload-artifact@v4
      with:
        name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}
        path: ${{ github.workspace }}/ut_log


