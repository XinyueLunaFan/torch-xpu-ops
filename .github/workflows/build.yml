name: Win-xpu-build-UT
on:
    workflow_dispatch:
      inputs:
        win_runner:
            description: Where to run the GHA job?
            type: choice
            options:
            - "icx-4434"
            - "self-hosted"
        working_commit:
            description: 'Working commit to pass to xpu.txt'
            required: true
            type: string

env:
    home_dir: 't'
    conda_env: 'torch_venv'
    conda_path: 'C:\Users\nrvalgo_jenkinsadm\miniforge3'
    python_version: '3.10'
    USE_XPU: 1
    VS2022INSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools'

jobs:
  Preparation:
    runs-on: ["${{ inputs.win_runner }}"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        ref: main
        fetch-depth: 0
        path: ${{ env.home_dir }}//actionrepo
    - name: Set conda environment
      shell: cmd
      run: |
        call %conda_path%\Scripts\activate.bat
        call conda remove -n %conda_env% --all -y
        call conda create -n %conda_env% python=3.10 -y
        call conda activate %conda_env%
        call conda remove ucrt -y
        call conda install cmake==3.26.4 ninja -y
        call conda install pyyaml -y
        call conda list
  Build-whls:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [Preparation]
    steps:
    - name: Build Torch
      shell: cmd
      run: |
        call %conda_path%\Scripts\activate.bat %conda_env%
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"


        if exist "C:\pytorch" (
          rmdir /s /q "C:\pytorch"
        )

        git clone https://github.com/pytorch/pytorch.git C:\pytorch > tmp_git_log.txt
        cd C:\pytorch
        set commit_number_arg=${{ inputs.working_commit }}
        python -c "import os;commit_number = os.getenv('commit_number_arg');f=open('third_party/xpu.txt', 'w');f.write(commit_number);f.close()"
        git submodule sync > tmp_git_sync_log.txt
        git submodule update --init --recursive > tmp_git_update_log.txt
        python -m pip install -r requirements.txt > tmp_pip_install_requirements_log.txt
        python setup.py bdist_wheel > tmp_log.txt

    - name: Build TorchVision
      shell: cmd
      run: |
        call %conda_path%\Scripts\activate.bat %conda_env%
        set "basekit_path=C:\Program Files (x86)\Intel\oneAPI"
        call "%basekit_path%\setvars.bat"
        if exist "%home_dir%\vision" rmdir /s /q "%home_dir%\vision"
        git clone https://github.com/pytorch/vision.git %home_dir%\vision
        cd %home_dir%\vision
        git submodule update --init --recursive
        pip install -r docs/requirements.txt

        if exist %home_dir%\pytorch\dist\torch-*.whl (
          pip install %home_dir%\pytorch\dist\torch-*.whl --force-reinstall
        ) else (
          echo "No torch whl found."
          exit
        )

        python setup.py bdist_wheel

        if exist %home_dir%\vision\dist\torchvision-*.whl (
          pip install %home_dir%\vision\dist\torchvision-*.whl --force-reinstall        
        ) else (
          echo "No torchvision whl found."
          exit         
        )

  Unit-tests:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [Build-whls, Preparation]
    steps:
    - name: Run Unit Tests
      shell: cmd
      run: |
        call %conda_path%\Scripts\activate.bat activate %conda_env%
        set "basekit_path=C:\Program Files (x86)\Intel\oneAPI"
        call "%basekit_path%\setvars.bat"

        if exist "%home_dir%\xpurepo" (
          rmdir /s /q "%home_dir%\xpurepo"
        )

        git clone https://github.com/intel/torch-xpu-ops.git %home_dir%\xpurepo
        cd %home_dir%\xpurepo\examples
        pip install pytest expecttest
        python -m pytest -v | tee "%home_dir%\mtl-bundle-uts.log"

  Upload-artifacts:
    runs-on: ["${{ inputs.win_runner }}"]
    needs: [Preparation, Build-whls]
    steps:
    - name: Upload whls
      uses: actions/upload-artifact@v2
      with:
        name: whls
        path: C:\pytorch\dist

    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: C:\pytorch\tmp_log.txt 
